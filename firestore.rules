// UNUSED: database.rules.json is the authoritative ruleset.
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null && request.auth.uid != null;
    }

    function isOwner(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }

    function disallowServerOwnedWrites() {
      return !(('credits' in request.resource.data) ||
               ('stripe' in request.resource.data) ||
               ('plan' in request.resource.data) ||
               ('subscription' in request.resource.data) ||
               ('role' in request.resource.data) ||
               ('stripeCustomerId' in request.resource.data));
    }

    function isDemoByClaim() {
      return isSignedIn() && (request.auth.token.demo == true);
    }

    function isDemoByUid() {
      return isSignedIn() && (request.auth.uid == "DEMO_UID_REPLACE_ME");
    }

    function isDemoUser() {
      return isDemoByClaim() || isDemoByUid();
    }

    match /users/{uid} {
      allow read: if isOwner(uid);
      allow create: if !isDemoUser() && isOwner(uid);
      allow update: if !isDemoUser() && isOwner(uid) && disallowServerOwnedWrites();
      allow delete: if false;

      match /scans/{scanId} {
        allow create: if !isDemoUser() && isOwner(uid)
          && request.resource.data.keys().hasOnly(['createdAt','notes','status'])
          && request.resource.data.status == 'queued';

        allow update: if !isDemoUser() && isOwner(uid)
          && request.resource.data.diff(resource.data).changedKeys().hasOnly(['notes']);

        allow read: if isOwner(uid);
        allow write: if false;
      }

      match /coach/{sub=**} {
        allow read: if isOwner(uid);
        allow write: if !isDemoUser() && isOwner(uid) && !request.resource.id.matches('plan(/.*)?');
      }

      match /coach/plan/{rest=**} {
        allow read: if isOwner(uid);
        allow write: if false;
      }

      match /nutritionLogs/{day} {
        allow read: if isOwner(uid);
        allow create: if !isDemoUser() && isOwner(uid);
        allow update: if !isDemoUser() && isOwner(uid)
          && request.resource.data.calories is int
          && request.resource.data.calories >= 0
          && request.resource.data.calories <= 10000;
        allow delete: if false;
      }

      match /healthDaily/{day} {
        allow read: if isOwner(uid);
        allow write: if !isDemoUser() && isOwner(uid);
      }
    }

    match /stripe_events/{eventId} {
      allow read, write: if false;
    }
  }
}
