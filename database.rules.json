rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null && request.auth.uid != null;
    }

    function isOwner(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }

    function isStaff() {
      return request.auth != null && request.auth.token.staff == true;
    }

    function serverOwnedKeys() {
      return ['credits', 'stripe', 'plan', 'subscription', 'role', 'stripeCustomerId'];
    }

    function clientPreservesServerFields() {
      return (
        !request.resource.data.keys().hasAny(serverOwnedKeys()) &&
        (
          !exists(resource.name) ||
          !request.resource.data.diff(resource.data).changedKeys().hasAny(serverOwnedKeys())
        )
      );
    }

    function isNumber(value) {
      return value is int || value is float;
    }

    function optionalNumberField(data, field, min, max) {
      return !(field in data) || (isNumber(data[field]) && data[field] >= min && data[field] <= max);
    }

    function validNutritionTotals(totals) {
      return totals is map &&
        totals.keys().hasOnly(['calories', 'protein', 'carbs', 'fat', 'alcohol']) &&
        optionalNumberField(totals, 'calories', 0, 20000) &&
        optionalNumberField(totals, 'protein', 0, 2000) &&
        optionalNumberField(totals, 'carbs', 0, 2000) &&
        optionalNumberField(totals, 'fat', 0, 2000) &&
        optionalNumberField(totals, 'alcohol', 0, 2000);
    }

    function validNutritionLog(dateId) {
      let data = request.resource.data;
      return dateId.matches('^\\d{4}-\\d{2}-\\d{2}$') &&
        data.keys().hasOnly(['calories', 'protein_g', 'carbs_g', 'fat_g', 'alcohol', 'meals', 'totals', 'updatedAt']) &&
        optionalNumberField(data, 'calories', 0, 20000) &&
        optionalNumberField(data, 'protein_g', 0, 2000) &&
        optionalNumberField(data, 'carbs_g', 0, 2000) &&
        optionalNumberField(data, 'fat_g', 0, 2000) &&
        optionalNumberField(data, 'alcohol', 0, 2000) &&
        (!('updatedAt' in data) || data.updatedAt is timestamp) &&
        (!('meals' in data) || (data.meals is list && data.meals.size() <= 200)) &&
        (!('totals' in data) || validNutritionTotals(data.totals));
    }

    match /app/publicConfig {
      allow read: if true;
      allow write: if false;
    }

    match /events/telemetry/{eventId} {
      allow create: if isSignedIn();
      allow read: if isStaff();
      allow update, delete: if false;
    }

    match /users/{uid} {
      allow read: if isOwner(uid);
      allow create: if isOwner(uid);
      allow update: if isOwner(uid) && clientPreservesServerFields();
      allow delete: if false;

      match /scans/{scanId} {
        allow read: if isOwner(uid) || isStaff();
        allow write: if false;
      }

      match /private/{document=**} {
        allow read: if isOwner(uid);
        allow write: if false;
      }

      match /coachPlans/{docId} {
        allow read: if isOwner(uid);
        allow create, update: if isOwner(uid) && docId == 'current';
        allow delete: if false;
      }

      match /coach/{document=**} {
        allow read: if isOwner(uid);
        allow create, update: if isOwner(uid);
        allow delete: if false;
      }

      match /nutritionLogs/{dateId} {
        allow read: if isOwner(uid);
        allow create, update: if isOwner(uid) && clientPreservesServerFields() && validNutritionLog(dateId);
        allow delete: if false;
      }

      match /{document=**} {
        allow read: if isOwner(uid);
        allow create, update: if isOwner(uid) && clientPreservesServerFields();
        allow delete: if false;
      }
    }

    match /stripe_events/{eventId} {
      allow read, write: if false;
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
