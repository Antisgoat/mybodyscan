rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuth() { return request.auth != null; }
    function isOwner(uid) { return request.auth != null && request.auth.uid == uid; }
    function changedKeys() {
      return exists(resource.name) ? request.resource.data.diff(resource.data).changedKeys() : request.resource.data.keys();
    }
    function noServerOwnedWrites() {
      return changedKeys().hasAny(['credits','stripe','plan','subscription','role','stripeCustomerId']) == false;
    }

    match /users/{uid} {
      allow read: if isOwner(uid);
      allow create, update: if isOwner(uid) && noServerOwnedWrites();
      allow delete: if false;

      match /coach/{docId} {
        allow read: if isOwner(uid);
        allow create, update: if isOwner(uid) && noServerOwnedWrites();
        allow delete: if false;
      }

      match /workoutLogs/{logId} {
        allow read, create, update: if isOwner(uid);
        allow delete: if isOwner(uid);
      }

      match /scans/{scanId} {
        allow read: if isOwner(uid);
        allow create: if isOwner(uid) &&
          request.resource.data.keys().hasOnly(['createdAt','status','notes','inputs','result','engine']) &&
          request.resource.data.status in ['queued','processing','complete','failed'];
        allow update: if isOwner(uid) &&
          request.resource.data.status in ['processing','complete','failed'] &&
          noServerOwnedWrites();
        allow delete: if false;
      }
    }
  }
}
